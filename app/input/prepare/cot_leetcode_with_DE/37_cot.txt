---
Example of question thirty-seven
---
Table: Salary
+-------------+------+
| Column Name | Type |
+-------------+------+
| id          | int  |
| employee_id | int  |
| amount      | int  |
| pay_date    | date |
+-------------+------+
In SQL, id is the primary key column for this table.
Each row of this table indicates the salary of an employee in one month.
employee_id is a foreign key (reference column) from the Employee table.

Table: Employee
+---------------+------+
| Column Name   | Type |
+---------------+------+
| employee_id   | int  |
| department_id | int  |
+---------------+------+
In SQL, employee_id is the primary key column for this table.
Each row of this table indicates the department of an employee.

Find the comparison result (higher/lower/same) of the average salary of employees in a department to the company's average salary.

Return the result table in any order.

The result format is in the following example.

Example 1:

Input:
Salary table:
+----+-------------+--------+------------+
| id | employee_id | amount | pay_date   |
+----+-------------+--------+------------+
| 1  | 1           | 9000   | 2017/03/31 |
| 2  | 2           | 6000   | 2017/03/31 |
| 3  | 3           | 10000  | 2017/03/31 |
| 4  | 1           | 7000   | 2017/02/28 |
| 5  | 2           | 6000   | 2017/02/28 |
| 6  | 3           | 8000   | 2017/02/28 |
+----+-------------+--------+------------+
Employee table:
+-------------+---------------+
| employee_id | department_id |
+-------------+---------------+
| 1           | 1             |
| 2           | 2             |
| 3           | 2             |
+-------------+---------------+
Output:
+-----------+---------------+------------+
| pay_month | department_id | comparison |
+-----------+---------------+------------+
| 2017-02   | 1             | same       |
| 2017-03   | 1             | higher     |
| 2017-02   | 2             | same       |
| 2017-03   | 2             | lower      |
+-----------+---------------+------------+
Explanation:
In March, the company's average salary is (9000+6000+10000)/3 = 8333.33...
The average salary for department '1' is 9000, which is the salary of employee_id '1' since there is only one employee in this department. So the comparison result is 'higher' since 9000 > 8333.33 obviously.
The average salary of department '2' is (6000 + 10000)/2 = 8000, which is the average of employee_id '2' and '3'. So the comparison result is 'lower' since 8000 < 8333.33.

With he same formula for the average salary comparison in February, the result is 'same' since both the department '1' and '2' have the same average salary with the company, which is 7000.
---
output
---
{
  "reasoning_process" : "Compare the average salary in each department to the average salary for the company as a whole. Calculate the average monthly salary for the entire company and for each department, then compare each department's average salary to the company's average salary and classify it as "higher", "lower" or "same".",
  "sql": "WITH MonthlySalaries AS ( SELECT CONVERT(VARCHAR(7), s.pay_date, 120) AS pay_month, -- 將日期轉換為YYYY-MM格式 e.department_id, AVG(CAST(s.amount AS DECIMAL(10, 2))) OVER(PARTITION BY CONVERT(VARCHAR(7), s.pay_date, 120)) AS company_avg_salary, AVG(CAST(s.amount AS DECIMAL(10, 2))) OVER(PARTITION BY e.department_id, CONVERT(VARCHAR(7), s.pay_date, 120)) AS dept_avg_salary FROM salary s JOIN employee e ON s.employee_id = e.employee_id ) SELECT pay_month, department_id, CASE WHEN dept_avg_salary > company_avg_salary THEN 'higher' WHEN dept_avg_salary < company_avg_salary THEN 'lower' ELSE 'same' END AS comparison FROM (SELECT DISTINCT pay_month, department_id, dept_avg_salary, company_avg_salary FROM MonthlySalaries) AS UniqueMonthlySalaries ORDER BY department_id, pay_month;"
}

---

Please keep in mind the reasoning process for solving the problem, I will provide the next sample question later...

---